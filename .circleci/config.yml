version: 2.1

commands:

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow_id:
        default: "${CIRCLE_WORKFLOW_ID:0:7}"
        type: string
    steps:
      - run:
          name: Revert Migrations
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure "https://kvdb.io/B15e9WYzosEcMgA3oHxrTW/migration_<<parameters.workflow_id>>")
            if(($SUCCESS==1));
            then
              cd ~/project/backend
              npm install
              npm run build
              npm run migration:revert
            fi


  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID. after empty bucket
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}



jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build


  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Run Front-end tests
          command: |
            cd frontend
            npm install
            npm run test

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run Back-end tests
          command: |
            cd backend
            npm install
            npm run test
      
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Scan Front-end
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical  

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Scan Back-end
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install tar utility
          command: |
            yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople
      - run:
          name: Ensure front-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople

      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].[PublicIpAddress]' \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --output text >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
            echo CIRCLE_WORKFLOW_ID=${CIRCLE_WORKFLOW_ID:0:7}
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment
      - revert-migrations  
  
  configure-infrastructure:
    docker:
     
      - image: python:3.10-alpine
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "af:d7:aa:71:84:89:db:fb:c1:e0:ad:2f:7f:5e:58:c2"
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            pip3 install awscli

      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
         
      - destroy-environment
      - revert-migrations  
  
  run-migrations:
    docker:
      # - image: circleci/node:13.8.0
      # - image: cimg/node:18.4.0  
      - image: cimg/node:13.8.0
    steps:
      - checkout
      
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Install dependencies awscli and ca certificates
          command: |
            sudo update-ca-certificates
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Run migrations
          command: |
            pwd
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
            cat migrations_dump.txt
    
      - run:
          name: Send migration results to kvdb
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl --insecure https://kvdb.io/B15e9WYzosEcMgA3oHxrTW/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1' 
            fi
      - destroy-environment

  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
            yum install -y tar gzip
            yum install -y awscli
            yum install -y wget
            wget https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
            ls
            yum install -y epel-release-latest-7.noarch.rpm
            yum update -y
  
            yum install -y ansible
            yum install -y python3
            curl --silent --location https://rpm.nodesource.com/setup_14.x | bash -
            yum install -y nodejs
      - add_ssh_keys:
          fingerprints: ["af:d7:aa:71:84:89:db:fb:c1:e0:ad:2f:7f:5e:58:c2"] 
      - attach_workspace:
          at: ~/

      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].[PublicIpAddress]' \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --output text
            )
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL-${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environment
      - revert-migrations  
  
  deploy-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["af:d7:aa:71:84:89:db:fb:c1:e0:ad:2f:7f:5e:58:c2"] 
      - attach_workspace:
          at: ~/

      - run:
          name: upgrade packages and Install AWS CLI
          command: |
            sudo apt update
            sudo apt upgrade -y
            sudo apt install awscli -y
      - run:
          name: Install dependencies
          command: |
            # your code here
            sudo apt install -y curl tar gzip
            sudo apt install -y python3
            sudo apt install -y python3-pip
            python3 --version
            python3 -m pip install --upgrade pip
            # pip3 install ansible
            python3 -m pip install ansible --user
      
      - run:
          name: Deploy backend
          command: |
            cat > backend/.env \<<- EOF
            TYPEORM_CONNECTION=$TYPEORM_CONNECTION
            TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR
            TYPEORM_ENTITIES=$TYPEORM_ENTITIES
            TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS
            TYPEORM_HOST=$TYPEORM_HOST
            TYPEORM_PORT=$TYPEORM_PORT
            TYPEORM_USERNAME=$TYPEORM_USERNAME
            TYPEORM_PASSWORD=$TYPEORM_PASSWORD
            TYPEORM_DATABASE=$TYPEORM_DATABASE
            EOF
            cat backend/.env
            
            cd backend
            npm install
            npm run build
            cd ..
            # Zip the directory
            tar -C backend -czvf artifact.tar.gz .
            ls -a && pwd
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
          no_output_timeout: 30m
      - destroy-environment
      - revert-migrations  


  smoke-test:
    docker:
      - image: python:3.7-alpine3.16
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update --no-cache tar gzip nodejs npm curl aws-cli
      - run:
          name: Backend smoke test.
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].[PublicIpAddress]' \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --output text
            )
            export API_URL="http://${BACKEND_IP}:3030"
            echo ${BACKEND_IP}
            echo udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
            echo ${API_URL}

            sleep 100

            if curl -s $API_URL/api/status | grep "ok"
            then
              return  0
            else
              return  1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            

            if curl -s ${URL} | grep "Welcome"
            then 
              return  1 
            else 
              return  1
            fi
      - destroy-environment
      - revert-migrations


  cloudfront-update:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run: 
          apk add --update tar gzip
      - run:
          name: Install dependencies (awscli)
          command: |
            apk --no-cache add py-pip
            pip install awscli
      - run:
          name: Update cloudfront distribution
          command: |
            export OldWorkFlowID=$(aws cloudformation list-exports \
            --query "Exports[?Name==\`WorkflowID\`].Value" \
            --no-paginate --output text)
            echo $OldWorkFlowID >> ~/OldWorkFlowID.txt
            cat ~/OldWorkFlowID.txt
            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --stack-name InitialStack \
            --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
            --tags project=udapeople
            echo Old workFlow ID: "$OldWorkFlowID"
            echo New workflow ID: "${CIRCLE_WORKFLOW_ID:0:7}"
      - persist_to_workspace:
          root: ~/
          paths: 
            - OldWorkFlowID.txt
      - destroy-environment
      - revert-migrations  


  
  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install tar gzip -y
      - attach_workspace:
          at: ~/

      - run:
          name: Remove all buckets and staks exept with curent ID
          command: |
            export OldWorkFlowID=$(cat ~/OldWorkFlowID.txt)
            echo Old workflow ID is: "$OldWorkFlowID"
            echo New workflow ID is: "${CIRCLE_WORKFLOW_ID:0:7}"
            
            export BUCKETS=($(aws s3api list-buckets --query "Buckets[*].Name" --output text))
            echo Bucket names: "${BUCKETS[@]}"

            for bucket in "${BUCKETS[@]}"
            do
              if [[ "${bucket}" != "udapeople-${CIRCLE_WORKFLOW_ID:0:7}" ]]
              then
                echo "Deleting bucket: ${bucket}"
                aws s3 rb "s3://${bucket}" --force || true
              fi
            done
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
              --stack-status-filter CREATE_COMPLETE --no-paginate --output text))
            echo Stack names: "${STACKS[@]}"

            for stack in "${STACKS[@]}"
            do
              if [[ "${stack}" != "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" ]] && [[ "${stack}" != "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" ]]
              then
                echo "Deleting stack: ${stack}"
                aws cloudformation delete-stack --stack-name "${stack}" || true
              fi
            done

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires:
            - build-frontend
      - test-backend:
          requires:
            - build-backend
      - scan-frontend:
          requires:
            - build-frontend
      - scan-backend:
          requires:
            - build-backend
      - deploy-infrastructure:
          requires:
            - test-frontend
            - test-backend
            - scan-frontend
            - scan-backend
      - configure-infrastructure:
          requires: 
            - deploy-infrastructure
      - run-migrations:
          requires: 
            - configure-infrastructure
      - deploy-frontend:
          requires: 
            - run-migrations
      - deploy-backend:
          requires: 
            - run-migrations
      - smoke-test:
          requires:
            - deploy-frontend
            - deploy-backend
      - cloudfront-update:
          requires: 
          - smoke-test
      - cleanup:
          requires:
            - cloudfront-update