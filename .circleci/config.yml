version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name backend-<< parameters.workflow_id >>
            aws cloudformation delete-stack --stack-name frontend-<< parameters.workflow_id >>


jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Run Front-end tests
          command: |
            cd frontend
            npm install
            npm run test

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run Back-end tests
          command: |
            cd backend
            npm install
            npm run test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Scan Front-end
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical  

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Scan Back-end
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install tar utility
          command: |
            yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople
      - run:
          name: Ensure front-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople

      - run:
          name: Add back-end ip to ansible inventory
          command: |
            BACKEND_IP=$(aws cloudformation describe-stacks --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" --query "Stacks[0].Outputs[?OutputKey=='PublicIP'].OutputValue" --output text)
            echo "${BACKEND_IP} ansible_connection=ssh ansible_user=ubuntu ansible_ssh_private_key_file=~/.ssh/id_rsa" >> .circleci/ansible/inventory.txt
            
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt

  configure-infrastructure:
    docker:
     
      - image: circleci/python:3.7.4
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "af:d7:aa:71:84:89:db:fb:c1:e0:ad:2f:7f:5e:58:c2"
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            sudo apt-get update
            sudo apt-get install -y tar gzip
            sudo apt-get install -y ansible
            sudo apt-get install -y awscli
            

      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
      
  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration results to memstash
          command: |
            then
                # If you are using kvdb.io, generate the bucket ID "LgK2W4748kBozsHfmPPdWv" in your local terminal first
              curl https://kvdb.io/LgK2W4748kBozsHfmPPdWv/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi

  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies #Python, Ansible, Node, NPM, and AWS CLI
          command: |
            sudo apt-get update
            sudo apt-get install -y tar gzip
            sudo apt-get install -y ansible
            sudo apt-get install -y awscli
            sudo apt-get install -y python3-pip
            sudo pip3 install boto3
            sudo apt-get install -y nodejs
            sudo apt-get install -y npm
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws cloudformation describe-stacks --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" --query "Stacks[0].Outputs[?OutputKey=='PublicIP'].OutputValue" --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL=${API_URL}"
            export API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
            
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-frontend-"${CIRCLE_WORKFLOW_ID:0:7}" --recursive
      
      

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires:
            - build-frontend
      - test-backend:
          requires:
            - build-backend

      - scan-frontend:
          requires:
            - build-frontend
      - scan-backend:
          requires:
            - build-backend
      - deploy-infrastructure:
          requires:
            - test-frontend
            - test-backend
            - scan-frontend
            - scan-backend
